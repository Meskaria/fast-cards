import {
  DMMF,
  DMMFClass,
  Engine,
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  sqltag as sql,
  empty,
  join,
  raw,
} from '@prisma/client/runtime';

export { PrismaClientKnownRequestError }
export { PrismaClientUnknownRequestError }
export { PrismaClientRustPanicError }
export { PrismaClientInitializationError }
export { PrismaClientValidationError }

/**
 * Re-export of sql-template-tag
 */
export { sql, empty, join, raw }

/**
 * Prisma Client JS version: 2.5.1
 * Query Engine version: c88925ce44a9b89b4351aec85ba6a28979d2658e
 */
export declare type PrismaVersion = {
  client: string
}

export declare const prismaVersion: PrismaVersion 

/**
 * Utility Types
 */

/**
 * From https://github.com/sindresorhus/type-fest/
 * Matches a JSON object.
 * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
 */
export declare type JsonObject = {[Key in string]?: JsonValue}
 
/**
 * From https://github.com/sindresorhus/type-fest/
 * Matches a JSON array.
 */
export declare interface JsonArray extends Array<JsonValue> {}
 
/**
 * From https://github.com/sindresorhus/type-fest/
 * Matches any valid JSON value.
 */
export declare type JsonValue = string | number | boolean | null | JsonObject | JsonArray

/**
 * Same as JsonObject, but allows undefined
 */
export declare type InputJsonObject = {[Key in string]?: JsonValue}
 
export declare interface InputJsonArray extends Array<JsonValue> {}
 
export declare type InputJsonValue = undefined |  string | number | boolean | null | InputJsonObject | InputJsonArray

declare type SelectAndInclude = {
  select: any
  include: any
}

declare type HasSelect = {
  select: any
}

declare type HasInclude = {
  include: any
}

declare type CheckSelect<T, S, U> = T extends SelectAndInclude
  ? 'Please either choose `select` or `include`'
  : T extends HasSelect
  ? U
  : T extends HasInclude
  ? U
  : S

/**
 * Get the type of the value, that the Promise holds.
 */
export declare type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

/**
 * Get the return type of a function which returns a Promise.
 */
export declare type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>


export declare type Enumerable<T> = T | Array<T>;

export type RequiredKeys<T> = {
  [K in keyof T]-?: {} extends Pick<T, K> ? never : K
}[keyof T]

export declare type TruthyKeys<T> = {
  [key in keyof T]: T[key] extends false | undefined | null ? never : key
}[keyof T]

export declare type TrueKeys<T> = TruthyKeys<Pick<T, RequiredKeys<T>>>

/**
 * Subset
 * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
 */
export declare type Subset<T, U> = {
  [key in keyof T]: key extends keyof U ? T[key] : never;
};
declare class PrismaClientFetcher {
  private readonly prisma;
  private readonly debug;
  private readonly hooks?;
  constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
  request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
  sanitizeMessage(message: string): string;
  protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
}


/**
 * Client
**/

export declare type Datasource = {
  url?: string
}

export type Datasources = {
  db?: Datasource
}

export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

export interface PrismaClientOptions {
  /**
   * Overwrites the datasource url from your prisma.schema file
   */
  datasources?: Datasources

  /**
   * @default "colorless"
   */
  errorFormat?: ErrorFormat

  /**
   * @example
   * ```
   * // Defaults to stdout
   * log: ['query', 'info', 'warn', 'error']
   * 
   * // Emit as events
   * log: [
   *  { emit: 'stdout', level: 'query' },
   *  { emit: 'stdout', level: 'info' },
   *  { emit: 'stdout', level: 'warn' }
   *  { emit: 'stdout', level: 'error' }
   * ]
   * ```
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
   */
  log?: Array<LogLevel | LogDefinition>
}

export type Hooks = {
  beforeRequest?: (options: {query: string, path: string[], rootField?: string, typeName?: string, document: any}) => any
}

/* Types for Logging */
export type LogLevel = 'info' | 'query' | 'warn' | 'error'
export type LogDefinition = {
  level: LogLevel
  emit: 'stdout' | 'event'
}

export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
export type GetEvents<T extends Array<LogLevel | LogDefinition>> = GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]> 

export type QueryEvent = {
  timestamp: Date
  query: string
  params: string
  duration: number
  target: string
}

export type LogEvent = {
  timestamp: Date
  message: string
  target: string
}
/* End Types for Logging */


export type Action =
  | 'findOne'
  | 'findMany'
  | 'create'
  | 'update'
  | 'updateMany'
  | 'upsert'
  | 'delete'
  | 'deleteMany'
  | 'executeRaw'
  | 'queryRaw'
  | 'aggregate'

/**
 * These options are being passed in to the middleware as "params"
 */
export type MiddlewareParams = {
  model?: string
  action: Action
  args: any
  dataPath: string[]
  runInTransaction: boolean
}

/**
 * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
 */
export type Middleware<T = any> = (
  params: MiddlewareParams,
  next: (params: MiddlewareParams) => Promise<T>,
) => Promise<T>

// tested in getLogLevel.test.ts
export declare function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js (ORM replacement)
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Profiles
 * const profiles = await prisma.profile.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export declare class PrismaClient<
  T extends PrismaClientOptions = PrismaClientOptions,
  U = keyof T extends 'log' ? T['log'] extends Array<LogLevel | LogDefinition> ? GetEvents<T['log']> : never : never
> {
  /**
   * @private
   */
  private fetcher;
  /**
   * @private
   */
  private readonly dmmf;
  /**
   * @private
   */
  private connectionPromise?;
  /**
   * @private
   */
  private disconnectionPromise?;
  /**
   * @private
   */
  private readonly engineConfig;
  /**
   * @private
   */
  private readonly measurePerformance;
  /**
   * @private
   */
  private engine: Engine;
  /**
   * @private
   */
  private errorFormat: ErrorFormat;

  /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js (ORM replacement)
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Profiles
   * const profiles = await prisma.profile.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */
  constructor(optionsArg?: T);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? QueryEvent : LogEvent) => void): void;
  /**
   * @deprecated renamed to `$on`
   */
  on<V extends U>(eventType: V, callback: (event: V extends 'query' ? QueryEvent : LogEvent) => void): void;
  /**
   * Connect with the database
   */
  $connect(): Promise<void>;
  /**
   * @deprecated renamed to `$connect`
   */
  connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<any>;
  /**
   * @deprecated renamed to `$disconnect`
   */
  disconnect(): Promise<any>;

  /**
   * Add a middleware
   */
  $use(cb: Middleware): void

  /**
   * Executes a raw query and returns the number of affected rows
   * @example
   * ```
   * // With parameters use prisma.executeRaw``, values will be escaped automatically
   * const result = await prisma.executeRaw`UPDATE User SET cool = ${true} WHERE id = ${1};`
   * // Or
   * const result = await prisma.executeRaw('UPDATE User SET cool = $1 WHERE id = $2 ;', true, 1)
  * ```
  * 
  * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
  */
  $executeRaw<T = any>(query: string | TemplateStringsArray, ...values: any[]): Promise<number>;

  /**
   * @deprecated renamed to `$executeRaw`
   */
  executeRaw<T = any>(query: string | TemplateStringsArray, ...values: any[]): Promise<number>;

  /**
   * Performs a raw query and returns the SELECT data
   * @example
   * ```
   * // With parameters use prisma.queryRaw``, values will be escaped automatically
   * const result = await prisma.queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'ema.il'};`
   * // Or
   * const result = await prisma.queryRaw('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'ema.il')
  * ```
  * 
  * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
  */
  $queryRaw<T = any>(query: string | TemplateStringsArray, ...values: any[]): Promise<T>;
 
  /**
   * @deprecated renamed to `$executeRaw`
   */
  queryRaw<T = any>(query: string | TemplateStringsArray, ...values: any[]): Promise<T>;

  /**
   * `prisma.profile`: Exposes CRUD operations for the **Profile** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Profiles
    * const profiles = await prisma.profile.findMany()
    * ```
    */
  get profile(): ProfileDelegate;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): UserDelegate;

  /**
   * `prisma.userOnLanguageOnProficiency`: Exposes CRUD operations for the **UserOnLanguageOnProficiency** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserOnLanguageOnProficiencies
    * const userOnLanguageOnProficiencies = await prisma.userOnLanguageOnProficiency.findMany()
    * ```
    */
  get userOnLanguageOnProficiency(): UserOnLanguageOnProficiencyDelegate;

  /**
   * `prisma.proficiency`: Exposes CRUD operations for the **Proficiency** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Proficiencies
    * const proficiencies = await prisma.proficiency.findMany()
    * ```
    */
  get proficiency(): ProficiencyDelegate;

  /**
   * `prisma.language`: Exposes CRUD operations for the **Language** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Languages
    * const languages = await prisma.language.findMany()
    * ```
    */
  get language(): LanguageDelegate;
}



/**
 * Enums
 */

// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

export declare const AccessRight: {
  STUDENT: 'STUDENT',
  MENTOR: 'MENTOR'
};

export declare type AccessRight = (typeof AccessRight)[keyof typeof AccessRight]


export declare const ProficiencyLevel: {
  BEGINNER: 'BEGINNER',
  INTERMEDIATE: 'INTERMEDIATE',
  PROFICIENT: 'PROFICIENT',
  EXPERT: 'EXPERT'
};

export declare type ProficiencyLevel = (typeof ProficiencyLevel)[keyof typeof ProficiencyLevel]


export declare const SortOrder: {
  asc: 'asc',
  desc: 'desc'
};

export declare type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


export declare const ProfileDistinctFieldEnum: {
  id: 'id',
  bio: 'bio',
  userId: 'userId'
};

export declare type ProfileDistinctFieldEnum = (typeof ProfileDistinctFieldEnum)[keyof typeof ProfileDistinctFieldEnum]


export declare const UserOnLanguageOnProficiencyDistinctFieldEnum: {
  id: 'id',
  languageId: 'languageId',
  proficiencyId: 'proficiencyId',
  userId: 'userId'
};

export declare type UserOnLanguageOnProficiencyDistinctFieldEnum = (typeof UserOnLanguageOnProficiencyDistinctFieldEnum)[keyof typeof UserOnLanguageOnProficiencyDistinctFieldEnum]


export declare const UserDistinctFieldEnum: {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  email: 'email',
  password: 'password',
  name: 'name',
  surname: 'surname',
  isDeleted: 'isDeleted',
  accessToken: 'accessToken',
  refreshToken: 'refreshToken',
  lastLogin: 'lastLogin',
  isEmailVerified: 'isEmailVerified',
  access: 'access'
};

export declare type UserDistinctFieldEnum = (typeof UserDistinctFieldEnum)[keyof typeof UserDistinctFieldEnum]


export declare const ProficiencyDistinctFieldEnum: {
  id: 'id',
  name: 'name'
};

export declare type ProficiencyDistinctFieldEnum = (typeof ProficiencyDistinctFieldEnum)[keyof typeof ProficiencyDistinctFieldEnum]


export declare const LanguageDistinctFieldEnum: {
  id: 'id',
  code: 'code'
};

export declare type LanguageDistinctFieldEnum = (typeof LanguageDistinctFieldEnum)[keyof typeof LanguageDistinctFieldEnum]



/**
 * Model Profile
 */

export type Profile = {
  id: number
  bio: JsonValue | null
  userId: number
}


export type AggregateProfile = {
  count: number
  avg: ProfileAvgAggregateOutputType | null
  sum: ProfileSumAggregateOutputType | null
  min: ProfileMinAggregateOutputType | null
  max: ProfileMaxAggregateOutputType | null
}

export type ProfileAvgAggregateOutputType = {
  id: number
  userId: number
}

export type ProfileSumAggregateOutputType = {
  id: number
  userId: number
}

export type ProfileMinAggregateOutputType = {
  id: number
  userId: number
}

export type ProfileMaxAggregateOutputType = {
  id: number
  userId: number
}


export type ProfileAvgAggregateInputType = {
  id?: true
  userId?: true
}

export type ProfileSumAggregateInputType = {
  id?: true
  userId?: true
}

export type ProfileMinAggregateInputType = {
  id?: true
  userId?: true
}

export type ProfileMaxAggregateInputType = {
  id?: true
  userId?: true
}

export type AggregateProfileArgs = {
  where?: ProfileWhereInput
  orderBy?: Enumerable<ProfileOrderByInput>
  cursor?: ProfileWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Enumerable<ProfileDistinctFieldEnum>
  count?: true
  avg?: ProfileAvgAggregateInputType
  sum?: ProfileSumAggregateInputType
  min?: ProfileMinAggregateInputType
  max?: ProfileMaxAggregateInputType
}

export type GetProfileAggregateType<T extends AggregateProfileArgs> = {
  [P in keyof T]: P extends 'count' ? number : GetProfileAggregateScalarType<T[P]>
}

export type GetProfileAggregateScalarType<T extends any> = {
  [P in keyof T]: P extends keyof ProfileAvgAggregateOutputType ? ProfileAvgAggregateOutputType[P] : never
}
    
    

export type ProfileSelect = {
  id?: boolean
  bio?: boolean
  user?: boolean | UserArgs
  userId?: boolean
}

export type ProfileInclude = {
  user?: boolean | UserArgs
}

export type ProfileGetPayload<
  S extends boolean | null | undefined | ProfileArgs,
  U = keyof S
> = S extends true
  ? Profile
  : S extends undefined
  ? never
  : S extends ProfileArgs | FindManyProfileArgs
  ? 'include' extends U
    ? Profile  & {
      [P in TrueKeys<S['include']>]:
      P extends 'user'
      ? UserGetPayload<S['include'][P]> : never
    }
  : 'select' extends U
    ? {
      [P in TrueKeys<S['select']>]:P extends keyof Profile ? Profile[P]
: 
      P extends 'user'
      ? UserGetPayload<S['select'][P]> : never
    }
  : Profile
: Profile


export interface ProfileDelegate {
  /**
   * Find zero or one Profile.
   * @param {FindOneProfileArgs} args - Arguments to find a Profile
   * @example
   * // Get one Profile
   * const profile = await prisma.profile.findOne({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
  **/
  findOne<T extends FindOneProfileArgs>(
    args: Subset<T, FindOneProfileArgs>
  ): CheckSelect<T, Prisma__ProfileClient<Profile | null>, Prisma__ProfileClient<ProfileGetPayload<T> | null>>
  /**
   * Find zero or more Profiles.
   * @param {FindManyProfileArgs=} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Profiles
   * const profiles = await prisma.profile.findMany()
   * 
   * // Get first 10 Profiles
   * const profiles = await prisma.profile.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const profileWithIdOnly = await prisma.profile.findMany({ select: { id: true } })
   * 
  **/
  findMany<T extends FindManyProfileArgs>(
    args?: Subset<T, FindManyProfileArgs>
  ): CheckSelect<T, Promise<Array<Profile>>, Promise<Array<ProfileGetPayload<T>>>>
  /**
   * Create a Profile.
   * @param {ProfileCreateArgs} args - Arguments to create a Profile.
   * @example
   * // Create one Profile
   * const Profile = await prisma.profile.create({
   *   data: {
   *     // ... data to create a Profile
   *   }
   * })
   * 
  **/
  create<T extends ProfileCreateArgs>(
    args: Subset<T, ProfileCreateArgs>
  ): CheckSelect<T, Prisma__ProfileClient<Profile>, Prisma__ProfileClient<ProfileGetPayload<T>>>
  /**
   * Delete a Profile.
   * @param {ProfileDeleteArgs} args - Arguments to delete one Profile.
   * @example
   * // Delete one Profile
   * const Profile = await prisma.profile.delete({
   *   where: {
   *     // ... filter to delete one Profile
   *   }
   * })
   * 
  **/
  delete<T extends ProfileDeleteArgs>(
    args: Subset<T, ProfileDeleteArgs>
  ): CheckSelect<T, Prisma__ProfileClient<Profile>, Prisma__ProfileClient<ProfileGetPayload<T>>>
  /**
   * Update one Profile.
   * @param {ProfileUpdateArgs} args - Arguments to update one Profile.
   * @example
   * // Update one Profile
   * const profile = await prisma.profile.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  update<T extends ProfileUpdateArgs>(
    args: Subset<T, ProfileUpdateArgs>
  ): CheckSelect<T, Prisma__ProfileClient<Profile>, Prisma__ProfileClient<ProfileGetPayload<T>>>
  /**
   * Delete zero or more Profiles.
   * @param {ProfileDeleteManyArgs} args - Arguments to filter Profiles to delete.
   * @example
   * // Delete a few Profiles
   * const { count } = await prisma.profile.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
  **/
  deleteMany<T extends ProfileDeleteManyArgs>(
    args: Subset<T, ProfileDeleteManyArgs>
  ): Promise<BatchPayload>
  /**
   * Update zero or more Profiles.
   * @param {ProfileUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Profiles
   * const profile = await prisma.profile.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  updateMany<T extends ProfileUpdateManyArgs>(
    args: Subset<T, ProfileUpdateManyArgs>
  ): Promise<BatchPayload>
  /**
   * Create or update one Profile.
   * @param {ProfileUpsertArgs} args - Arguments to update or create a Profile.
   * @example
   * // Update or create a Profile
   * const profile = await prisma.profile.upsert({
   *   create: {
   *     // ... data to create a Profile
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Profile we want to update
   *   }
   * })
  **/
  upsert<T extends ProfileUpsertArgs>(
    args: Subset<T, ProfileUpsertArgs>
  ): CheckSelect<T, Prisma__ProfileClient<Profile>, Prisma__ProfileClient<ProfileGetPayload<T>>>
  /**
   * Count
   */
  count(args?: Omit<FindManyProfileArgs, 'select' | 'include'>): Promise<number>

  /**
   * Aggregate
   */
  aggregate<T extends AggregateProfileArgs>(args: Subset<T, AggregateProfileArgs>): Promise<GetProfileAggregateType<T>>
}

/**
 * The delegate class that acts as a "Promise-like" for Profile.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in 
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export declare class Prisma__ProfileClient<T> implements Promise<T> {
  private readonly _dmmf;
  private readonly _fetcher;
  private readonly _queryType;
  private readonly _rootField;
  private readonly _clientMethod;
  private readonly _args;
  private readonly _dataPath;
  private readonly _errorFormat;
  private readonly _measurePerformance?;
  private _isList;
  private _callsite;
  private _requestPromise?;
  constructor(_dmmf: DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
  readonly [Symbol.toStringTag]: 'PrismaClientPromise';

  user<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null>, Prisma__UserClient<UserGetPayload<T> | null>>;

  private get _document();
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): Promise<T>;
}

// Custom InputTypes

/**
 * Profile findOne
 */
export type FindOneProfileArgs = {
  /**
   * Select specific fields to fetch from the Profile
  **/
  select?: ProfileSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: ProfileInclude | null
  /**
   * Filter, which Profile to fetch.
  **/
  where: ProfileWhereUniqueInput
}


/**
 * Profile findMany
 */
export type FindManyProfileArgs = {
  /**
   * Select specific fields to fetch from the Profile
  **/
  select?: ProfileSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: ProfileInclude | null
  /**
   * Filter, which Profiles to fetch.
  **/
  where?: ProfileWhereInput
  /**
   * Determine the order of the Profiles to fetch.
  **/
  orderBy?: Enumerable<ProfileOrderByInput>
  /**
   * Sets the position for listing Profiles.
  **/
  cursor?: ProfileWhereUniqueInput
  /**
   * The number of Profiles to fetch. If negative number, it will take Profiles before the `cursor`.
  **/
  take?: number
  /**
   * Skip the first `n` Profiles.
  **/
  skip?: number
  distinct?: Enumerable<ProfileDistinctFieldEnum>
}


/**
 * Profile create
 */
export type ProfileCreateArgs = {
  /**
   * Select specific fields to fetch from the Profile
  **/
  select?: ProfileSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: ProfileInclude | null
  /**
   * The data needed to create a Profile.
  **/
  data: ProfileCreateInput
}


/**
 * Profile update
 */
export type ProfileUpdateArgs = {
  /**
   * Select specific fields to fetch from the Profile
  **/
  select?: ProfileSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: ProfileInclude | null
  /**
   * The data needed to update a Profile.
  **/
  data: ProfileUpdateInput
  /**
   * Choose, which Profile to update.
  **/
  where: ProfileWhereUniqueInput
}


/**
 * Profile updateMany
 */
export type ProfileUpdateManyArgs = {
  data: ProfileUpdateManyMutationInput
  where?: ProfileWhereInput
}


/**
 * Profile upsert
 */
export type ProfileUpsertArgs = {
  /**
   * Select specific fields to fetch from the Profile
  **/
  select?: ProfileSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: ProfileInclude | null
  /**
   * The filter to search for the Profile to update in case it exists.
  **/
  where: ProfileWhereUniqueInput
  /**
   * In case the Profile found by the `where` argument doesn't exist, create a new Profile with this data.
  **/
  create: ProfileCreateInput
  /**
   * In case the Profile was found with the provided `where` argument, update it with this data.
  **/
  update: ProfileUpdateInput
}


/**
 * Profile delete
 */
export type ProfileDeleteArgs = {
  /**
   * Select specific fields to fetch from the Profile
  **/
  select?: ProfileSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: ProfileInclude | null
  /**
   * Filter which Profile to delete.
  **/
  where: ProfileWhereUniqueInput
}


/**
 * Profile deleteMany
 */
export type ProfileDeleteManyArgs = {
  where?: ProfileWhereInput
}


/**
 * Profile without action
 */
export type ProfileArgs = {
  /**
   * Select specific fields to fetch from the Profile
  **/
  select?: ProfileSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: ProfileInclude | null
}



/**
 * Model User
 */

export type User = {
  id: number
  createdAt: Date
  updatedAt: Date
  email: string
  password: string
  name: string
  surname: string
  isDeleted: boolean
  accessToken: string | null
  refreshToken: string | null
  lastLogin: Date | null
  isEmailVerified: boolean
  access: AccessRight
}


export type AggregateUser = {
  count: number
  avg: UserAvgAggregateOutputType | null
  sum: UserSumAggregateOutputType | null
  min: UserMinAggregateOutputType | null
  max: UserMaxAggregateOutputType | null
}

export type UserAvgAggregateOutputType = {
  id: number
}

export type UserSumAggregateOutputType = {
  id: number
}

export type UserMinAggregateOutputType = {
  id: number
}

export type UserMaxAggregateOutputType = {
  id: number
}


export type UserAvgAggregateInputType = {
  id?: true
}

export type UserSumAggregateInputType = {
  id?: true
}

export type UserMinAggregateInputType = {
  id?: true
}

export type UserMaxAggregateInputType = {
  id?: true
}

export type AggregateUserArgs = {
  where?: UserWhereInput
  orderBy?: Enumerable<UserOrderByInput>
  cursor?: UserWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Enumerable<UserDistinctFieldEnum>
  count?: true
  avg?: UserAvgAggregateInputType
  sum?: UserSumAggregateInputType
  min?: UserMinAggregateInputType
  max?: UserMaxAggregateInputType
}

export type GetUserAggregateType<T extends AggregateUserArgs> = {
  [P in keyof T]: P extends 'count' ? number : GetUserAggregateScalarType<T[P]>
}

export type GetUserAggregateScalarType<T extends any> = {
  [P in keyof T]: P extends keyof UserAvgAggregateOutputType ? UserAvgAggregateOutputType[P] : never
}
    
    

export type UserSelect = {
  id?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  email?: boolean
  password?: boolean
  name?: boolean
  surname?: boolean
  isDeleted?: boolean
  accessToken?: boolean
  refreshToken?: boolean
  lastLogin?: boolean
  isEmailVerified?: boolean
  access?: boolean
  languages?: boolean | FindManyUserOnLanguageOnProficiencyArgs
  profile?: boolean | ProfileArgs
}

export type UserInclude = {
  languages?: boolean | FindManyUserOnLanguageOnProficiencyArgs
  profile?: boolean | ProfileArgs
}

export type UserGetPayload<
  S extends boolean | null | undefined | UserArgs,
  U = keyof S
> = S extends true
  ? User
  : S extends undefined
  ? never
  : S extends UserArgs | FindManyUserArgs
  ? 'include' extends U
    ? User  & {
      [P in TrueKeys<S['include']>]:
      P extends 'languages'
      ? Array<UserOnLanguageOnProficiencyGetPayload<S['include'][P]>> :
      P extends 'profile'
      ? ProfileGetPayload<S['include'][P]> | null : never
    }
  : 'select' extends U
    ? {
      [P in TrueKeys<S['select']>]:P extends keyof User ? User[P]
: 
      P extends 'languages'
      ? Array<UserOnLanguageOnProficiencyGetPayload<S['select'][P]>> :
      P extends 'profile'
      ? ProfileGetPayload<S['select'][P]> | null : never
    }
  : User
: User


export interface UserDelegate {
  /**
   * Find zero or one User.
   * @param {FindOneUserArgs} args - Arguments to find a User
   * @example
   * // Get one User
   * const user = await prisma.user.findOne({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
  **/
  findOne<T extends FindOneUserArgs>(
    args: Subset<T, FindOneUserArgs>
  ): CheckSelect<T, Prisma__UserClient<User | null>, Prisma__UserClient<UserGetPayload<T> | null>>
  /**
   * Find zero or more Users.
   * @param {FindManyUserArgs=} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Users
   * const users = await prisma.user.findMany()
   * 
   * // Get first 10 Users
   * const users = await prisma.user.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
   * 
  **/
  findMany<T extends FindManyUserArgs>(
    args?: Subset<T, FindManyUserArgs>
  ): CheckSelect<T, Promise<Array<User>>, Promise<Array<UserGetPayload<T>>>>
  /**
   * Create a User.
   * @param {UserCreateArgs} args - Arguments to create a User.
   * @example
   * // Create one User
   * const User = await prisma.user.create({
   *   data: {
   *     // ... data to create a User
   *   }
   * })
   * 
  **/
  create<T extends UserCreateArgs>(
    args: Subset<T, UserCreateArgs>
  ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>
  /**
   * Delete a User.
   * @param {UserDeleteArgs} args - Arguments to delete one User.
   * @example
   * // Delete one User
   * const User = await prisma.user.delete({
   *   where: {
   *     // ... filter to delete one User
   *   }
   * })
   * 
  **/
  delete<T extends UserDeleteArgs>(
    args: Subset<T, UserDeleteArgs>
  ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>
  /**
   * Update one User.
   * @param {UserUpdateArgs} args - Arguments to update one User.
   * @example
   * // Update one User
   * const user = await prisma.user.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  update<T extends UserUpdateArgs>(
    args: Subset<T, UserUpdateArgs>
  ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>
  /**
   * Delete zero or more Users.
   * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
   * @example
   * // Delete a few Users
   * const { count } = await prisma.user.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
  **/
  deleteMany<T extends UserDeleteManyArgs>(
    args: Subset<T, UserDeleteManyArgs>
  ): Promise<BatchPayload>
  /**
   * Update zero or more Users.
   * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Users
   * const user = await prisma.user.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  updateMany<T extends UserUpdateManyArgs>(
    args: Subset<T, UserUpdateManyArgs>
  ): Promise<BatchPayload>
  /**
   * Create or update one User.
   * @param {UserUpsertArgs} args - Arguments to update or create a User.
   * @example
   * // Update or create a User
   * const user = await prisma.user.upsert({
   *   create: {
   *     // ... data to create a User
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the User we want to update
   *   }
   * })
  **/
  upsert<T extends UserUpsertArgs>(
    args: Subset<T, UserUpsertArgs>
  ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>
  /**
   * Count
   */
  count(args?: Omit<FindManyUserArgs, 'select' | 'include'>): Promise<number>

  /**
   * Aggregate
   */
  aggregate<T extends AggregateUserArgs>(args: Subset<T, AggregateUserArgs>): Promise<GetUserAggregateType<T>>
}

/**
 * The delegate class that acts as a "Promise-like" for User.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in 
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export declare class Prisma__UserClient<T> implements Promise<T> {
  private readonly _dmmf;
  private readonly _fetcher;
  private readonly _queryType;
  private readonly _rootField;
  private readonly _clientMethod;
  private readonly _args;
  private readonly _dataPath;
  private readonly _errorFormat;
  private readonly _measurePerformance?;
  private _isList;
  private _callsite;
  private _requestPromise?;
  constructor(_dmmf: DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
  readonly [Symbol.toStringTag]: 'PrismaClientPromise';

  languages<T extends FindManyUserOnLanguageOnProficiencyArgs = {}>(args?: Subset<T, FindManyUserOnLanguageOnProficiencyArgs>): CheckSelect<T, Promise<Array<UserOnLanguageOnProficiency>>, Promise<Array<UserOnLanguageOnProficiencyGetPayload<T>>>>;

  profile<T extends ProfileArgs = {}>(args?: Subset<T, ProfileArgs>): CheckSelect<T, Prisma__ProfileClient<Profile | null>, Prisma__ProfileClient<ProfileGetPayload<T> | null>>;

  private get _document();
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): Promise<T>;
}

// Custom InputTypes

/**
 * User findOne
 */
export type FindOneUserArgs = {
  /**
   * Select specific fields to fetch from the User
  **/
  select?: UserSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: UserInclude | null
  /**
   * Filter, which User to fetch.
  **/
  where: UserWhereUniqueInput
}


/**
 * User findMany
 */
export type FindManyUserArgs = {
  /**
   * Select specific fields to fetch from the User
  **/
  select?: UserSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: UserInclude | null
  /**
   * Filter, which Users to fetch.
  **/
  where?: UserWhereInput
  /**
   * Determine the order of the Users to fetch.
  **/
  orderBy?: Enumerable<UserOrderByInput>
  /**
   * Sets the position for listing Users.
  **/
  cursor?: UserWhereUniqueInput
  /**
   * The number of Users to fetch. If negative number, it will take Users before the `cursor`.
  **/
  take?: number
  /**
   * Skip the first `n` Users.
  **/
  skip?: number
  distinct?: Enumerable<UserDistinctFieldEnum>
}


/**
 * User create
 */
export type UserCreateArgs = {
  /**
   * Select specific fields to fetch from the User
  **/
  select?: UserSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: UserInclude | null
  /**
   * The data needed to create a User.
  **/
  data: UserCreateInput
}


/**
 * User update
 */
export type UserUpdateArgs = {
  /**
   * Select specific fields to fetch from the User
  **/
  select?: UserSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: UserInclude | null
  /**
   * The data needed to update a User.
  **/
  data: UserUpdateInput
  /**
   * Choose, which User to update.
  **/
  where: UserWhereUniqueInput
}


/**
 * User updateMany
 */
export type UserUpdateManyArgs = {
  data: UserUpdateManyMutationInput
  where?: UserWhereInput
}


/**
 * User upsert
 */
export type UserUpsertArgs = {
  /**
   * Select specific fields to fetch from the User
  **/
  select?: UserSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: UserInclude | null
  /**
   * The filter to search for the User to update in case it exists.
  **/
  where: UserWhereUniqueInput
  /**
   * In case the User found by the `where` argument doesn't exist, create a new User with this data.
  **/
  create: UserCreateInput
  /**
   * In case the User was found with the provided `where` argument, update it with this data.
  **/
  update: UserUpdateInput
}


/**
 * User delete
 */
export type UserDeleteArgs = {
  /**
   * Select specific fields to fetch from the User
  **/
  select?: UserSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: UserInclude | null
  /**
   * Filter which User to delete.
  **/
  where: UserWhereUniqueInput
}


/**
 * User deleteMany
 */
export type UserDeleteManyArgs = {
  where?: UserWhereInput
}


/**
 * User without action
 */
export type UserArgs = {
  /**
   * Select specific fields to fetch from the User
  **/
  select?: UserSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: UserInclude | null
}



/**
 * Model UserOnLanguageOnProficiency
 */

export type UserOnLanguageOnProficiency = {
  id: number
  languageId: number
  proficiencyId: number
  userId: number
}


export type AggregateUserOnLanguageOnProficiency = {
  count: number
  avg: UserOnLanguageOnProficiencyAvgAggregateOutputType | null
  sum: UserOnLanguageOnProficiencySumAggregateOutputType | null
  min: UserOnLanguageOnProficiencyMinAggregateOutputType | null
  max: UserOnLanguageOnProficiencyMaxAggregateOutputType | null
}

export type UserOnLanguageOnProficiencyAvgAggregateOutputType = {
  id: number
  languageId: number
  proficiencyId: number
  userId: number
}

export type UserOnLanguageOnProficiencySumAggregateOutputType = {
  id: number
  languageId: number
  proficiencyId: number
  userId: number
}

export type UserOnLanguageOnProficiencyMinAggregateOutputType = {
  id: number
  languageId: number
  proficiencyId: number
  userId: number
}

export type UserOnLanguageOnProficiencyMaxAggregateOutputType = {
  id: number
  languageId: number
  proficiencyId: number
  userId: number
}


export type UserOnLanguageOnProficiencyAvgAggregateInputType = {
  id?: true
  languageId?: true
  proficiencyId?: true
  userId?: true
}

export type UserOnLanguageOnProficiencySumAggregateInputType = {
  id?: true
  languageId?: true
  proficiencyId?: true
  userId?: true
}

export type UserOnLanguageOnProficiencyMinAggregateInputType = {
  id?: true
  languageId?: true
  proficiencyId?: true
  userId?: true
}

export type UserOnLanguageOnProficiencyMaxAggregateInputType = {
  id?: true
  languageId?: true
  proficiencyId?: true
  userId?: true
}

export type AggregateUserOnLanguageOnProficiencyArgs = {
  where?: UserOnLanguageOnProficiencyWhereInput
  orderBy?: Enumerable<UserOnLanguageOnProficiencyOrderByInput>
  cursor?: UserOnLanguageOnProficiencyWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Enumerable<UserOnLanguageOnProficiencyDistinctFieldEnum>
  count?: true
  avg?: UserOnLanguageOnProficiencyAvgAggregateInputType
  sum?: UserOnLanguageOnProficiencySumAggregateInputType
  min?: UserOnLanguageOnProficiencyMinAggregateInputType
  max?: UserOnLanguageOnProficiencyMaxAggregateInputType
}

export type GetUserOnLanguageOnProficiencyAggregateType<T extends AggregateUserOnLanguageOnProficiencyArgs> = {
  [P in keyof T]: P extends 'count' ? number : GetUserOnLanguageOnProficiencyAggregateScalarType<T[P]>
}

export type GetUserOnLanguageOnProficiencyAggregateScalarType<T extends any> = {
  [P in keyof T]: P extends keyof UserOnLanguageOnProficiencyAvgAggregateOutputType ? UserOnLanguageOnProficiencyAvgAggregateOutputType[P] : never
}
    
    

export type UserOnLanguageOnProficiencySelect = {
  id?: boolean
  language?: boolean | LanguageArgs
  languageId?: boolean
  proficiency?: boolean | ProficiencyArgs
  proficiencyId?: boolean
  user?: boolean | UserArgs
  userId?: boolean
}

export type UserOnLanguageOnProficiencyInclude = {
  language?: boolean | LanguageArgs
  proficiency?: boolean | ProficiencyArgs
  user?: boolean | UserArgs
}

export type UserOnLanguageOnProficiencyGetPayload<
  S extends boolean | null | undefined | UserOnLanguageOnProficiencyArgs,
  U = keyof S
> = S extends true
  ? UserOnLanguageOnProficiency
  : S extends undefined
  ? never
  : S extends UserOnLanguageOnProficiencyArgs | FindManyUserOnLanguageOnProficiencyArgs
  ? 'include' extends U
    ? UserOnLanguageOnProficiency  & {
      [P in TrueKeys<S['include']>]:
      P extends 'language'
      ? LanguageGetPayload<S['include'][P]> :
      P extends 'proficiency'
      ? ProficiencyGetPayload<S['include'][P]> :
      P extends 'user'
      ? UserGetPayload<S['include'][P]> : never
    }
  : 'select' extends U
    ? {
      [P in TrueKeys<S['select']>]:P extends keyof UserOnLanguageOnProficiency ? UserOnLanguageOnProficiency[P]
: 
      P extends 'language'
      ? LanguageGetPayload<S['select'][P]> :
      P extends 'proficiency'
      ? ProficiencyGetPayload<S['select'][P]> :
      P extends 'user'
      ? UserGetPayload<S['select'][P]> : never
    }
  : UserOnLanguageOnProficiency
: UserOnLanguageOnProficiency


export interface UserOnLanguageOnProficiencyDelegate {
  /**
   * Find zero or one UserOnLanguageOnProficiency.
   * @param {FindOneUserOnLanguageOnProficiencyArgs} args - Arguments to find a UserOnLanguageOnProficiency
   * @example
   * // Get one UserOnLanguageOnProficiency
   * const userOnLanguageOnProficiency = await prisma.userOnLanguageOnProficiency.findOne({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
  **/
  findOne<T extends FindOneUserOnLanguageOnProficiencyArgs>(
    args: Subset<T, FindOneUserOnLanguageOnProficiencyArgs>
  ): CheckSelect<T, Prisma__UserOnLanguageOnProficiencyClient<UserOnLanguageOnProficiency | null>, Prisma__UserOnLanguageOnProficiencyClient<UserOnLanguageOnProficiencyGetPayload<T> | null>>
  /**
   * Find zero or more UserOnLanguageOnProficiencies.
   * @param {FindManyUserOnLanguageOnProficiencyArgs=} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all UserOnLanguageOnProficiencies
   * const userOnLanguageOnProficiencies = await prisma.userOnLanguageOnProficiency.findMany()
   * 
   * // Get first 10 UserOnLanguageOnProficiencies
   * const userOnLanguageOnProficiencies = await prisma.userOnLanguageOnProficiency.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const userOnLanguageOnProficiencyWithIdOnly = await prisma.userOnLanguageOnProficiency.findMany({ select: { id: true } })
   * 
  **/
  findMany<T extends FindManyUserOnLanguageOnProficiencyArgs>(
    args?: Subset<T, FindManyUserOnLanguageOnProficiencyArgs>
  ): CheckSelect<T, Promise<Array<UserOnLanguageOnProficiency>>, Promise<Array<UserOnLanguageOnProficiencyGetPayload<T>>>>
  /**
   * Create a UserOnLanguageOnProficiency.
   * @param {UserOnLanguageOnProficiencyCreateArgs} args - Arguments to create a UserOnLanguageOnProficiency.
   * @example
   * // Create one UserOnLanguageOnProficiency
   * const UserOnLanguageOnProficiency = await prisma.userOnLanguageOnProficiency.create({
   *   data: {
   *     // ... data to create a UserOnLanguageOnProficiency
   *   }
   * })
   * 
  **/
  create<T extends UserOnLanguageOnProficiencyCreateArgs>(
    args: Subset<T, UserOnLanguageOnProficiencyCreateArgs>
  ): CheckSelect<T, Prisma__UserOnLanguageOnProficiencyClient<UserOnLanguageOnProficiency>, Prisma__UserOnLanguageOnProficiencyClient<UserOnLanguageOnProficiencyGetPayload<T>>>
  /**
   * Delete a UserOnLanguageOnProficiency.
   * @param {UserOnLanguageOnProficiencyDeleteArgs} args - Arguments to delete one UserOnLanguageOnProficiency.
   * @example
   * // Delete one UserOnLanguageOnProficiency
   * const UserOnLanguageOnProficiency = await prisma.userOnLanguageOnProficiency.delete({
   *   where: {
   *     // ... filter to delete one UserOnLanguageOnProficiency
   *   }
   * })
   * 
  **/
  delete<T extends UserOnLanguageOnProficiencyDeleteArgs>(
    args: Subset<T, UserOnLanguageOnProficiencyDeleteArgs>
  ): CheckSelect<T, Prisma__UserOnLanguageOnProficiencyClient<UserOnLanguageOnProficiency>, Prisma__UserOnLanguageOnProficiencyClient<UserOnLanguageOnProficiencyGetPayload<T>>>
  /**
   * Update one UserOnLanguageOnProficiency.
   * @param {UserOnLanguageOnProficiencyUpdateArgs} args - Arguments to update one UserOnLanguageOnProficiency.
   * @example
   * // Update one UserOnLanguageOnProficiency
   * const userOnLanguageOnProficiency = await prisma.userOnLanguageOnProficiency.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  update<T extends UserOnLanguageOnProficiencyUpdateArgs>(
    args: Subset<T, UserOnLanguageOnProficiencyUpdateArgs>
  ): CheckSelect<T, Prisma__UserOnLanguageOnProficiencyClient<UserOnLanguageOnProficiency>, Prisma__UserOnLanguageOnProficiencyClient<UserOnLanguageOnProficiencyGetPayload<T>>>
  /**
   * Delete zero or more UserOnLanguageOnProficiencies.
   * @param {UserOnLanguageOnProficiencyDeleteManyArgs} args - Arguments to filter UserOnLanguageOnProficiencies to delete.
   * @example
   * // Delete a few UserOnLanguageOnProficiencies
   * const { count } = await prisma.userOnLanguageOnProficiency.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
  **/
  deleteMany<T extends UserOnLanguageOnProficiencyDeleteManyArgs>(
    args: Subset<T, UserOnLanguageOnProficiencyDeleteManyArgs>
  ): Promise<BatchPayload>
  /**
   * Update zero or more UserOnLanguageOnProficiencies.
   * @param {UserOnLanguageOnProficiencyUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many UserOnLanguageOnProficiencies
   * const userOnLanguageOnProficiency = await prisma.userOnLanguageOnProficiency.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  updateMany<T extends UserOnLanguageOnProficiencyUpdateManyArgs>(
    args: Subset<T, UserOnLanguageOnProficiencyUpdateManyArgs>
  ): Promise<BatchPayload>
  /**
   * Create or update one UserOnLanguageOnProficiency.
   * @param {UserOnLanguageOnProficiencyUpsertArgs} args - Arguments to update or create a UserOnLanguageOnProficiency.
   * @example
   * // Update or create a UserOnLanguageOnProficiency
   * const userOnLanguageOnProficiency = await prisma.userOnLanguageOnProficiency.upsert({
   *   create: {
   *     // ... data to create a UserOnLanguageOnProficiency
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the UserOnLanguageOnProficiency we want to update
   *   }
   * })
  **/
  upsert<T extends UserOnLanguageOnProficiencyUpsertArgs>(
    args: Subset<T, UserOnLanguageOnProficiencyUpsertArgs>
  ): CheckSelect<T, Prisma__UserOnLanguageOnProficiencyClient<UserOnLanguageOnProficiency>, Prisma__UserOnLanguageOnProficiencyClient<UserOnLanguageOnProficiencyGetPayload<T>>>
  /**
   * Count
   */
  count(args?: Omit<FindManyUserOnLanguageOnProficiencyArgs, 'select' | 'include'>): Promise<number>

  /**
   * Aggregate
   */
  aggregate<T extends AggregateUserOnLanguageOnProficiencyArgs>(args: Subset<T, AggregateUserOnLanguageOnProficiencyArgs>): Promise<GetUserOnLanguageOnProficiencyAggregateType<T>>
}

/**
 * The delegate class that acts as a "Promise-like" for UserOnLanguageOnProficiency.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in 
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export declare class Prisma__UserOnLanguageOnProficiencyClient<T> implements Promise<T> {
  private readonly _dmmf;
  private readonly _fetcher;
  private readonly _queryType;
  private readonly _rootField;
  private readonly _clientMethod;
  private readonly _args;
  private readonly _dataPath;
  private readonly _errorFormat;
  private readonly _measurePerformance?;
  private _isList;
  private _callsite;
  private _requestPromise?;
  constructor(_dmmf: DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
  readonly [Symbol.toStringTag]: 'PrismaClientPromise';

  language<T extends LanguageArgs = {}>(args?: Subset<T, LanguageArgs>): CheckSelect<T, Prisma__LanguageClient<Language | null>, Prisma__LanguageClient<LanguageGetPayload<T> | null>>;

  proficiency<T extends ProficiencyArgs = {}>(args?: Subset<T, ProficiencyArgs>): CheckSelect<T, Prisma__ProficiencyClient<Proficiency | null>, Prisma__ProficiencyClient<ProficiencyGetPayload<T> | null>>;

  user<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null>, Prisma__UserClient<UserGetPayload<T> | null>>;

  private get _document();
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): Promise<T>;
}

// Custom InputTypes

/**
 * UserOnLanguageOnProficiency findOne
 */
export type FindOneUserOnLanguageOnProficiencyArgs = {
  /**
   * Select specific fields to fetch from the UserOnLanguageOnProficiency
  **/
  select?: UserOnLanguageOnProficiencySelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: UserOnLanguageOnProficiencyInclude | null
  /**
   * Filter, which UserOnLanguageOnProficiency to fetch.
  **/
  where: UserOnLanguageOnProficiencyWhereUniqueInput
}


/**
 * UserOnLanguageOnProficiency findMany
 */
export type FindManyUserOnLanguageOnProficiencyArgs = {
  /**
   * Select specific fields to fetch from the UserOnLanguageOnProficiency
  **/
  select?: UserOnLanguageOnProficiencySelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: UserOnLanguageOnProficiencyInclude | null
  /**
   * Filter, which UserOnLanguageOnProficiencies to fetch.
  **/
  where?: UserOnLanguageOnProficiencyWhereInput
  /**
   * Determine the order of the UserOnLanguageOnProficiencies to fetch.
  **/
  orderBy?: Enumerable<UserOnLanguageOnProficiencyOrderByInput>
  /**
   * Sets the position for listing UserOnLanguageOnProficiencies.
  **/
  cursor?: UserOnLanguageOnProficiencyWhereUniqueInput
  /**
   * The number of UserOnLanguageOnProficiencies to fetch. If negative number, it will take UserOnLanguageOnProficiencies before the `cursor`.
  **/
  take?: number
  /**
   * Skip the first `n` UserOnLanguageOnProficiencies.
  **/
  skip?: number
  distinct?: Enumerable<UserOnLanguageOnProficiencyDistinctFieldEnum>
}


/**
 * UserOnLanguageOnProficiency create
 */
export type UserOnLanguageOnProficiencyCreateArgs = {
  /**
   * Select specific fields to fetch from the UserOnLanguageOnProficiency
  **/
  select?: UserOnLanguageOnProficiencySelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: UserOnLanguageOnProficiencyInclude | null
  /**
   * The data needed to create a UserOnLanguageOnProficiency.
  **/
  data: UserOnLanguageOnProficiencyCreateInput
}


/**
 * UserOnLanguageOnProficiency update
 */
export type UserOnLanguageOnProficiencyUpdateArgs = {
  /**
   * Select specific fields to fetch from the UserOnLanguageOnProficiency
  **/
  select?: UserOnLanguageOnProficiencySelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: UserOnLanguageOnProficiencyInclude | null
  /**
   * The data needed to update a UserOnLanguageOnProficiency.
  **/
  data: UserOnLanguageOnProficiencyUpdateInput
  /**
   * Choose, which UserOnLanguageOnProficiency to update.
  **/
  where: UserOnLanguageOnProficiencyWhereUniqueInput
}


/**
 * UserOnLanguageOnProficiency updateMany
 */
export type UserOnLanguageOnProficiencyUpdateManyArgs = {
  data: UserOnLanguageOnProficiencyUpdateManyMutationInput
  where?: UserOnLanguageOnProficiencyWhereInput
}


/**
 * UserOnLanguageOnProficiency upsert
 */
export type UserOnLanguageOnProficiencyUpsertArgs = {
  /**
   * Select specific fields to fetch from the UserOnLanguageOnProficiency
  **/
  select?: UserOnLanguageOnProficiencySelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: UserOnLanguageOnProficiencyInclude | null
  /**
   * The filter to search for the UserOnLanguageOnProficiency to update in case it exists.
  **/
  where: UserOnLanguageOnProficiencyWhereUniqueInput
  /**
   * In case the UserOnLanguageOnProficiency found by the `where` argument doesn't exist, create a new UserOnLanguageOnProficiency with this data.
  **/
  create: UserOnLanguageOnProficiencyCreateInput
  /**
   * In case the UserOnLanguageOnProficiency was found with the provided `where` argument, update it with this data.
  **/
  update: UserOnLanguageOnProficiencyUpdateInput
}


/**
 * UserOnLanguageOnProficiency delete
 */
export type UserOnLanguageOnProficiencyDeleteArgs = {
  /**
   * Select specific fields to fetch from the UserOnLanguageOnProficiency
  **/
  select?: UserOnLanguageOnProficiencySelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: UserOnLanguageOnProficiencyInclude | null
  /**
   * Filter which UserOnLanguageOnProficiency to delete.
  **/
  where: UserOnLanguageOnProficiencyWhereUniqueInput
}


/**
 * UserOnLanguageOnProficiency deleteMany
 */
export type UserOnLanguageOnProficiencyDeleteManyArgs = {
  where?: UserOnLanguageOnProficiencyWhereInput
}


/**
 * UserOnLanguageOnProficiency without action
 */
export type UserOnLanguageOnProficiencyArgs = {
  /**
   * Select specific fields to fetch from the UserOnLanguageOnProficiency
  **/
  select?: UserOnLanguageOnProficiencySelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: UserOnLanguageOnProficiencyInclude | null
}



/**
 * Model Proficiency
 */

export type Proficiency = {
  id: number
  name: ProficiencyLevel
}


export type AggregateProficiency = {
  count: number
  avg: ProficiencyAvgAggregateOutputType | null
  sum: ProficiencySumAggregateOutputType | null
  min: ProficiencyMinAggregateOutputType | null
  max: ProficiencyMaxAggregateOutputType | null
}

export type ProficiencyAvgAggregateOutputType = {
  id: number
}

export type ProficiencySumAggregateOutputType = {
  id: number
}

export type ProficiencyMinAggregateOutputType = {
  id: number
}

export type ProficiencyMaxAggregateOutputType = {
  id: number
}


export type ProficiencyAvgAggregateInputType = {
  id?: true
}

export type ProficiencySumAggregateInputType = {
  id?: true
}

export type ProficiencyMinAggregateInputType = {
  id?: true
}

export type ProficiencyMaxAggregateInputType = {
  id?: true
}

export type AggregateProficiencyArgs = {
  where?: ProficiencyWhereInput
  orderBy?: Enumerable<ProficiencyOrderByInput>
  cursor?: ProficiencyWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Enumerable<ProficiencyDistinctFieldEnum>
  count?: true
  avg?: ProficiencyAvgAggregateInputType
  sum?: ProficiencySumAggregateInputType
  min?: ProficiencyMinAggregateInputType
  max?: ProficiencyMaxAggregateInputType
}

export type GetProficiencyAggregateType<T extends AggregateProficiencyArgs> = {
  [P in keyof T]: P extends 'count' ? number : GetProficiencyAggregateScalarType<T[P]>
}

export type GetProficiencyAggregateScalarType<T extends any> = {
  [P in keyof T]: P extends keyof ProficiencyAvgAggregateOutputType ? ProficiencyAvgAggregateOutputType[P] : never
}
    
    

export type ProficiencySelect = {
  id?: boolean
  name?: boolean
  UserOnLanguageOnProficiency?: boolean | FindManyUserOnLanguageOnProficiencyArgs
}

export type ProficiencyInclude = {
  UserOnLanguageOnProficiency?: boolean | FindManyUserOnLanguageOnProficiencyArgs
}

export type ProficiencyGetPayload<
  S extends boolean | null | undefined | ProficiencyArgs,
  U = keyof S
> = S extends true
  ? Proficiency
  : S extends undefined
  ? never
  : S extends ProficiencyArgs | FindManyProficiencyArgs
  ? 'include' extends U
    ? Proficiency  & {
      [P in TrueKeys<S['include']>]:
      P extends 'UserOnLanguageOnProficiency'
      ? Array<UserOnLanguageOnProficiencyGetPayload<S['include'][P]>> : never
    }
  : 'select' extends U
    ? {
      [P in TrueKeys<S['select']>]:P extends keyof Proficiency ? Proficiency[P]
: 
      P extends 'UserOnLanguageOnProficiency'
      ? Array<UserOnLanguageOnProficiencyGetPayload<S['select'][P]>> : never
    }
  : Proficiency
: Proficiency


export interface ProficiencyDelegate {
  /**
   * Find zero or one Proficiency.
   * @param {FindOneProficiencyArgs} args - Arguments to find a Proficiency
   * @example
   * // Get one Proficiency
   * const proficiency = await prisma.proficiency.findOne({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
  **/
  findOne<T extends FindOneProficiencyArgs>(
    args: Subset<T, FindOneProficiencyArgs>
  ): CheckSelect<T, Prisma__ProficiencyClient<Proficiency | null>, Prisma__ProficiencyClient<ProficiencyGetPayload<T> | null>>
  /**
   * Find zero or more Proficiencies.
   * @param {FindManyProficiencyArgs=} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Proficiencies
   * const proficiencies = await prisma.proficiency.findMany()
   * 
   * // Get first 10 Proficiencies
   * const proficiencies = await prisma.proficiency.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const proficiencyWithIdOnly = await prisma.proficiency.findMany({ select: { id: true } })
   * 
  **/
  findMany<T extends FindManyProficiencyArgs>(
    args?: Subset<T, FindManyProficiencyArgs>
  ): CheckSelect<T, Promise<Array<Proficiency>>, Promise<Array<ProficiencyGetPayload<T>>>>
  /**
   * Create a Proficiency.
   * @param {ProficiencyCreateArgs} args - Arguments to create a Proficiency.
   * @example
   * // Create one Proficiency
   * const Proficiency = await prisma.proficiency.create({
   *   data: {
   *     // ... data to create a Proficiency
   *   }
   * })
   * 
  **/
  create<T extends ProficiencyCreateArgs>(
    args: Subset<T, ProficiencyCreateArgs>
  ): CheckSelect<T, Prisma__ProficiencyClient<Proficiency>, Prisma__ProficiencyClient<ProficiencyGetPayload<T>>>
  /**
   * Delete a Proficiency.
   * @param {ProficiencyDeleteArgs} args - Arguments to delete one Proficiency.
   * @example
   * // Delete one Proficiency
   * const Proficiency = await prisma.proficiency.delete({
   *   where: {
   *     // ... filter to delete one Proficiency
   *   }
   * })
   * 
  **/
  delete<T extends ProficiencyDeleteArgs>(
    args: Subset<T, ProficiencyDeleteArgs>
  ): CheckSelect<T, Prisma__ProficiencyClient<Proficiency>, Prisma__ProficiencyClient<ProficiencyGetPayload<T>>>
  /**
   * Update one Proficiency.
   * @param {ProficiencyUpdateArgs} args - Arguments to update one Proficiency.
   * @example
   * // Update one Proficiency
   * const proficiency = await prisma.proficiency.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  update<T extends ProficiencyUpdateArgs>(
    args: Subset<T, ProficiencyUpdateArgs>
  ): CheckSelect<T, Prisma__ProficiencyClient<Proficiency>, Prisma__ProficiencyClient<ProficiencyGetPayload<T>>>
  /**
   * Delete zero or more Proficiencies.
   * @param {ProficiencyDeleteManyArgs} args - Arguments to filter Proficiencies to delete.
   * @example
   * // Delete a few Proficiencies
   * const { count } = await prisma.proficiency.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
  **/
  deleteMany<T extends ProficiencyDeleteManyArgs>(
    args: Subset<T, ProficiencyDeleteManyArgs>
  ): Promise<BatchPayload>
  /**
   * Update zero or more Proficiencies.
   * @param {ProficiencyUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Proficiencies
   * const proficiency = await prisma.proficiency.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  updateMany<T extends ProficiencyUpdateManyArgs>(
    args: Subset<T, ProficiencyUpdateManyArgs>
  ): Promise<BatchPayload>
  /**
   * Create or update one Proficiency.
   * @param {ProficiencyUpsertArgs} args - Arguments to update or create a Proficiency.
   * @example
   * // Update or create a Proficiency
   * const proficiency = await prisma.proficiency.upsert({
   *   create: {
   *     // ... data to create a Proficiency
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Proficiency we want to update
   *   }
   * })
  **/
  upsert<T extends ProficiencyUpsertArgs>(
    args: Subset<T, ProficiencyUpsertArgs>
  ): CheckSelect<T, Prisma__ProficiencyClient<Proficiency>, Prisma__ProficiencyClient<ProficiencyGetPayload<T>>>
  /**
   * Count
   */
  count(args?: Omit<FindManyProficiencyArgs, 'select' | 'include'>): Promise<number>

  /**
   * Aggregate
   */
  aggregate<T extends AggregateProficiencyArgs>(args: Subset<T, AggregateProficiencyArgs>): Promise<GetProficiencyAggregateType<T>>
}

/**
 * The delegate class that acts as a "Promise-like" for Proficiency.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in 
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export declare class Prisma__ProficiencyClient<T> implements Promise<T> {
  private readonly _dmmf;
  private readonly _fetcher;
  private readonly _queryType;
  private readonly _rootField;
  private readonly _clientMethod;
  private readonly _args;
  private readonly _dataPath;
  private readonly _errorFormat;
  private readonly _measurePerformance?;
  private _isList;
  private _callsite;
  private _requestPromise?;
  constructor(_dmmf: DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
  readonly [Symbol.toStringTag]: 'PrismaClientPromise';

  UserOnLanguageOnProficiency<T extends FindManyUserOnLanguageOnProficiencyArgs = {}>(args?: Subset<T, FindManyUserOnLanguageOnProficiencyArgs>): CheckSelect<T, Promise<Array<UserOnLanguageOnProficiency>>, Promise<Array<UserOnLanguageOnProficiencyGetPayload<T>>>>;

  private get _document();
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): Promise<T>;
}

// Custom InputTypes

/**
 * Proficiency findOne
 */
export type FindOneProficiencyArgs = {
  /**
   * Select specific fields to fetch from the Proficiency
  **/
  select?: ProficiencySelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: ProficiencyInclude | null
  /**
   * Filter, which Proficiency to fetch.
  **/
  where: ProficiencyWhereUniqueInput
}


/**
 * Proficiency findMany
 */
export type FindManyProficiencyArgs = {
  /**
   * Select specific fields to fetch from the Proficiency
  **/
  select?: ProficiencySelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: ProficiencyInclude | null
  /**
   * Filter, which Proficiencies to fetch.
  **/
  where?: ProficiencyWhereInput
  /**
   * Determine the order of the Proficiencies to fetch.
  **/
  orderBy?: Enumerable<ProficiencyOrderByInput>
  /**
   * Sets the position for listing Proficiencies.
  **/
  cursor?: ProficiencyWhereUniqueInput
  /**
   * The number of Proficiencies to fetch. If negative number, it will take Proficiencies before the `cursor`.
  **/
  take?: number
  /**
   * Skip the first `n` Proficiencies.
  **/
  skip?: number
  distinct?: Enumerable<ProficiencyDistinctFieldEnum>
}


/**
 * Proficiency create
 */
export type ProficiencyCreateArgs = {
  /**
   * Select specific fields to fetch from the Proficiency
  **/
  select?: ProficiencySelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: ProficiencyInclude | null
  /**
   * The data needed to create a Proficiency.
  **/
  data: ProficiencyCreateInput
}


/**
 * Proficiency update
 */
export type ProficiencyUpdateArgs = {
  /**
   * Select specific fields to fetch from the Proficiency
  **/
  select?: ProficiencySelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: ProficiencyInclude | null
  /**
   * The data needed to update a Proficiency.
  **/
  data: ProficiencyUpdateInput
  /**
   * Choose, which Proficiency to update.
  **/
  where: ProficiencyWhereUniqueInput
}


/**
 * Proficiency updateMany
 */
export type ProficiencyUpdateManyArgs = {
  data: ProficiencyUpdateManyMutationInput
  where?: ProficiencyWhereInput
}


/**
 * Proficiency upsert
 */
export type ProficiencyUpsertArgs = {
  /**
   * Select specific fields to fetch from the Proficiency
  **/
  select?: ProficiencySelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: ProficiencyInclude | null
  /**
   * The filter to search for the Proficiency to update in case it exists.
  **/
  where: ProficiencyWhereUniqueInput
  /**
   * In case the Proficiency found by the `where` argument doesn't exist, create a new Proficiency with this data.
  **/
  create: ProficiencyCreateInput
  /**
   * In case the Proficiency was found with the provided `where` argument, update it with this data.
  **/
  update: ProficiencyUpdateInput
}


/**
 * Proficiency delete
 */
export type ProficiencyDeleteArgs = {
  /**
   * Select specific fields to fetch from the Proficiency
  **/
  select?: ProficiencySelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: ProficiencyInclude | null
  /**
   * Filter which Proficiency to delete.
  **/
  where: ProficiencyWhereUniqueInput
}


/**
 * Proficiency deleteMany
 */
export type ProficiencyDeleteManyArgs = {
  where?: ProficiencyWhereInput
}


/**
 * Proficiency without action
 */
export type ProficiencyArgs = {
  /**
   * Select specific fields to fetch from the Proficiency
  **/
  select?: ProficiencySelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: ProficiencyInclude | null
}



/**
 * Model Language
 */

export type Language = {
  id: number
  code: string
}


export type AggregateLanguage = {
  count: number
  avg: LanguageAvgAggregateOutputType | null
  sum: LanguageSumAggregateOutputType | null
  min: LanguageMinAggregateOutputType | null
  max: LanguageMaxAggregateOutputType | null
}

export type LanguageAvgAggregateOutputType = {
  id: number
}

export type LanguageSumAggregateOutputType = {
  id: number
}

export type LanguageMinAggregateOutputType = {
  id: number
}

export type LanguageMaxAggregateOutputType = {
  id: number
}


export type LanguageAvgAggregateInputType = {
  id?: true
}

export type LanguageSumAggregateInputType = {
  id?: true
}

export type LanguageMinAggregateInputType = {
  id?: true
}

export type LanguageMaxAggregateInputType = {
  id?: true
}

export type AggregateLanguageArgs = {
  where?: LanguageWhereInput
  orderBy?: Enumerable<LanguageOrderByInput>
  cursor?: LanguageWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Enumerable<LanguageDistinctFieldEnum>
  count?: true
  avg?: LanguageAvgAggregateInputType
  sum?: LanguageSumAggregateInputType
  min?: LanguageMinAggregateInputType
  max?: LanguageMaxAggregateInputType
}

export type GetLanguageAggregateType<T extends AggregateLanguageArgs> = {
  [P in keyof T]: P extends 'count' ? number : GetLanguageAggregateScalarType<T[P]>
}

export type GetLanguageAggregateScalarType<T extends any> = {
  [P in keyof T]: P extends keyof LanguageAvgAggregateOutputType ? LanguageAvgAggregateOutputType[P] : never
}
    
    

export type LanguageSelect = {
  id?: boolean
  code?: boolean
  UserOnLanguageOnProficiency?: boolean | FindManyUserOnLanguageOnProficiencyArgs
}

export type LanguageInclude = {
  UserOnLanguageOnProficiency?: boolean | FindManyUserOnLanguageOnProficiencyArgs
}

export type LanguageGetPayload<
  S extends boolean | null | undefined | LanguageArgs,
  U = keyof S
> = S extends true
  ? Language
  : S extends undefined
  ? never
  : S extends LanguageArgs | FindManyLanguageArgs
  ? 'include' extends U
    ? Language  & {
      [P in TrueKeys<S['include']>]:
      P extends 'UserOnLanguageOnProficiency'
      ? Array<UserOnLanguageOnProficiencyGetPayload<S['include'][P]>> : never
    }
  : 'select' extends U
    ? {
      [P in TrueKeys<S['select']>]:P extends keyof Language ? Language[P]
: 
      P extends 'UserOnLanguageOnProficiency'
      ? Array<UserOnLanguageOnProficiencyGetPayload<S['select'][P]>> : never
    }
  : Language
: Language


export interface LanguageDelegate {
  /**
   * Find zero or one Language.
   * @param {FindOneLanguageArgs} args - Arguments to find a Language
   * @example
   * // Get one Language
   * const language = await prisma.language.findOne({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
  **/
  findOne<T extends FindOneLanguageArgs>(
    args: Subset<T, FindOneLanguageArgs>
  ): CheckSelect<T, Prisma__LanguageClient<Language | null>, Prisma__LanguageClient<LanguageGetPayload<T> | null>>
  /**
   * Find zero or more Languages.
   * @param {FindManyLanguageArgs=} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Languages
   * const languages = await prisma.language.findMany()
   * 
   * // Get first 10 Languages
   * const languages = await prisma.language.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const languageWithIdOnly = await prisma.language.findMany({ select: { id: true } })
   * 
  **/
  findMany<T extends FindManyLanguageArgs>(
    args?: Subset<T, FindManyLanguageArgs>
  ): CheckSelect<T, Promise<Array<Language>>, Promise<Array<LanguageGetPayload<T>>>>
  /**
   * Create a Language.
   * @param {LanguageCreateArgs} args - Arguments to create a Language.
   * @example
   * // Create one Language
   * const Language = await prisma.language.create({
   *   data: {
   *     // ... data to create a Language
   *   }
   * })
   * 
  **/
  create<T extends LanguageCreateArgs>(
    args: Subset<T, LanguageCreateArgs>
  ): CheckSelect<T, Prisma__LanguageClient<Language>, Prisma__LanguageClient<LanguageGetPayload<T>>>
  /**
   * Delete a Language.
   * @param {LanguageDeleteArgs} args - Arguments to delete one Language.
   * @example
   * // Delete one Language
   * const Language = await prisma.language.delete({
   *   where: {
   *     // ... filter to delete one Language
   *   }
   * })
   * 
  **/
  delete<T extends LanguageDeleteArgs>(
    args: Subset<T, LanguageDeleteArgs>
  ): CheckSelect<T, Prisma__LanguageClient<Language>, Prisma__LanguageClient<LanguageGetPayload<T>>>
  /**
   * Update one Language.
   * @param {LanguageUpdateArgs} args - Arguments to update one Language.
   * @example
   * // Update one Language
   * const language = await prisma.language.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  update<T extends LanguageUpdateArgs>(
    args: Subset<T, LanguageUpdateArgs>
  ): CheckSelect<T, Prisma__LanguageClient<Language>, Prisma__LanguageClient<LanguageGetPayload<T>>>
  /**
   * Delete zero or more Languages.
   * @param {LanguageDeleteManyArgs} args - Arguments to filter Languages to delete.
   * @example
   * // Delete a few Languages
   * const { count } = await prisma.language.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
  **/
  deleteMany<T extends LanguageDeleteManyArgs>(
    args: Subset<T, LanguageDeleteManyArgs>
  ): Promise<BatchPayload>
  /**
   * Update zero or more Languages.
   * @param {LanguageUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Languages
   * const language = await prisma.language.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  updateMany<T extends LanguageUpdateManyArgs>(
    args: Subset<T, LanguageUpdateManyArgs>
  ): Promise<BatchPayload>
  /**
   * Create or update one Language.
   * @param {LanguageUpsertArgs} args - Arguments to update or create a Language.
   * @example
   * // Update or create a Language
   * const language = await prisma.language.upsert({
   *   create: {
   *     // ... data to create a Language
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Language we want to update
   *   }
   * })
  **/
  upsert<T extends LanguageUpsertArgs>(
    args: Subset<T, LanguageUpsertArgs>
  ): CheckSelect<T, Prisma__LanguageClient<Language>, Prisma__LanguageClient<LanguageGetPayload<T>>>
  /**
   * Count
   */
  count(args?: Omit<FindManyLanguageArgs, 'select' | 'include'>): Promise<number>

  /**
   * Aggregate
   */
  aggregate<T extends AggregateLanguageArgs>(args: Subset<T, AggregateLanguageArgs>): Promise<GetLanguageAggregateType<T>>
}

/**
 * The delegate class that acts as a "Promise-like" for Language.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in 
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export declare class Prisma__LanguageClient<T> implements Promise<T> {
  private readonly _dmmf;
  private readonly _fetcher;
  private readonly _queryType;
  private readonly _rootField;
  private readonly _clientMethod;
  private readonly _args;
  private readonly _dataPath;
  private readonly _errorFormat;
  private readonly _measurePerformance?;
  private _isList;
  private _callsite;
  private _requestPromise?;
  constructor(_dmmf: DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
  readonly [Symbol.toStringTag]: 'PrismaClientPromise';

  UserOnLanguageOnProficiency<T extends FindManyUserOnLanguageOnProficiencyArgs = {}>(args?: Subset<T, FindManyUserOnLanguageOnProficiencyArgs>): CheckSelect<T, Promise<Array<UserOnLanguageOnProficiency>>, Promise<Array<UserOnLanguageOnProficiencyGetPayload<T>>>>;

  private get _document();
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): Promise<T>;
}

// Custom InputTypes

/**
 * Language findOne
 */
export type FindOneLanguageArgs = {
  /**
   * Select specific fields to fetch from the Language
  **/
  select?: LanguageSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: LanguageInclude | null
  /**
   * Filter, which Language to fetch.
  **/
  where: LanguageWhereUniqueInput
}


/**
 * Language findMany
 */
export type FindManyLanguageArgs = {
  /**
   * Select specific fields to fetch from the Language
  **/
  select?: LanguageSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: LanguageInclude | null
  /**
   * Filter, which Languages to fetch.
  **/
  where?: LanguageWhereInput
  /**
   * Determine the order of the Languages to fetch.
  **/
  orderBy?: Enumerable<LanguageOrderByInput>
  /**
   * Sets the position for listing Languages.
  **/
  cursor?: LanguageWhereUniqueInput
  /**
   * The number of Languages to fetch. If negative number, it will take Languages before the `cursor`.
  **/
  take?: number
  /**
   * Skip the first `n` Languages.
  **/
  skip?: number
  distinct?: Enumerable<LanguageDistinctFieldEnum>
}


/**
 * Language create
 */
export type LanguageCreateArgs = {
  /**
   * Select specific fields to fetch from the Language
  **/
  select?: LanguageSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: LanguageInclude | null
  /**
   * The data needed to create a Language.
  **/
  data: LanguageCreateInput
}


/**
 * Language update
 */
export type LanguageUpdateArgs = {
  /**
   * Select specific fields to fetch from the Language
  **/
  select?: LanguageSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: LanguageInclude | null
  /**
   * The data needed to update a Language.
  **/
  data: LanguageUpdateInput
  /**
   * Choose, which Language to update.
  **/
  where: LanguageWhereUniqueInput
}


/**
 * Language updateMany
 */
export type LanguageUpdateManyArgs = {
  data: LanguageUpdateManyMutationInput
  where?: LanguageWhereInput
}


/**
 * Language upsert
 */
export type LanguageUpsertArgs = {
  /**
   * Select specific fields to fetch from the Language
  **/
  select?: LanguageSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: LanguageInclude | null
  /**
   * The filter to search for the Language to update in case it exists.
  **/
  where: LanguageWhereUniqueInput
  /**
   * In case the Language found by the `where` argument doesn't exist, create a new Language with this data.
  **/
  create: LanguageCreateInput
  /**
   * In case the Language was found with the provided `where` argument, update it with this data.
  **/
  update: LanguageUpdateInput
}


/**
 * Language delete
 */
export type LanguageDeleteArgs = {
  /**
   * Select specific fields to fetch from the Language
  **/
  select?: LanguageSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: LanguageInclude | null
  /**
   * Filter which Language to delete.
  **/
  where: LanguageWhereUniqueInput
}


/**
 * Language deleteMany
 */
export type LanguageDeleteManyArgs = {
  where?: LanguageWhereInput
}


/**
 * Language without action
 */
export type LanguageArgs = {
  /**
   * Select specific fields to fetch from the Language
  **/
  select?: LanguageSelect | null
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: LanguageInclude | null
}



/**
 * Deep Input Types
 */


export type NestedIntFilter = {
  equals?: number
  in?: Enumerable<number>
  notIn?: Enumerable<number>
  lt?: number
  lte?: number
  gt?: number
  gte?: number
  not?: NestedIntFilter | null
}

export type IntFilter = {
  equals?: number
  in?: Enumerable<number>
  notIn?: Enumerable<number>
  lt?: number
  lte?: number
  gt?: number
  gte?: number
  not?: number | NestedIntFilter
}

export type NestedJsonNullableFilter = {
  equals?: InputJsonValue | null
  not?: NestedJsonNullableFilter | null
}

export type JsonNullableFilter = {
  equals?: InputJsonValue | null
  not?: InputJsonValue | NestedJsonNullableFilter | null
}

export type NestedDateTimeFilter = {
  equals?: Date | string
  in?: Enumerable<Date | string>
  notIn?: Enumerable<Date | string>
  lt?: Date | string
  lte?: Date | string
  gt?: Date | string
  gte?: Date | string
  not?: NestedDateTimeFilter | null
}

export type DateTimeFilter = {
  equals?: Date | string
  in?: Enumerable<Date | string>
  notIn?: Enumerable<Date | string>
  lt?: Date | string
  lte?: Date | string
  gt?: Date | string
  gte?: Date | string
  not?: Date | string | NestedDateTimeFilter
}

export type NestedStringFilter = {
  equals?: string
  in?: Enumerable<string>
  notIn?: Enumerable<string>
  lt?: string
  lte?: string
  gt?: string
  gte?: string
  contains?: string
  startsWith?: string
  endsWith?: string
  not?: NestedStringFilter | null
}

export type StringFilter = {
  equals?: string
  in?: Enumerable<string>
  notIn?: Enumerable<string>
  lt?: string
  lte?: string
  gt?: string
  gte?: string
  contains?: string
  startsWith?: string
  endsWith?: string
  not?: string | NestedStringFilter
}

export type NestedBoolFilter = {
  equals?: boolean
  not?: NestedBoolFilter | null
}

export type BoolFilter = {
  equals?: boolean
  not?: boolean | NestedBoolFilter
}

export type NestedStringNullableFilter = {
  equals?: string | null
  in?: Enumerable<string> | null
  notIn?: Enumerable<string> | null
  lt?: string | null
  lte?: string | null
  gt?: string | null
  gte?: string | null
  contains?: string | null
  startsWith?: string | null
  endsWith?: string | null
  not?: NestedStringNullableFilter | null
}

export type StringNullableFilter = {
  equals?: string | null
  in?: Enumerable<string> | null
  notIn?: Enumerable<string> | null
  lt?: string | null
  lte?: string | null
  gt?: string | null
  gte?: string | null
  contains?: string | null
  startsWith?: string | null
  endsWith?: string | null
  not?: string | NestedStringNullableFilter | null
}

export type NestedDateTimeNullableFilter = {
  equals?: Date | string | null
  in?: Enumerable<Date | string> | null
  notIn?: Enumerable<Date | string> | null
  lt?: Date | string | null
  lte?: Date | string | null
  gt?: Date | string | null
  gte?: Date | string | null
  not?: NestedDateTimeNullableFilter | null
}

export type DateTimeNullableFilter = {
  equals?: Date | string | null
  in?: Enumerable<Date | string> | null
  notIn?: Enumerable<Date | string> | null
  lt?: Date | string | null
  lte?: Date | string | null
  gt?: Date | string | null
  gte?: Date | string | null
  not?: Date | string | NestedDateTimeNullableFilter | null
}

export type NestedEnumAccessRightFilter = {
  equals?: AccessRight
  in?: Enumerable<AccessRight>
  notIn?: Enumerable<AccessRight>
  not?: NestedEnumAccessRightFilter | null
}

export type EnumAccessRightFilter = {
  equals?: AccessRight
  in?: Enumerable<AccessRight>
  notIn?: Enumerable<AccessRight>
  not?: AccessRight | NestedEnumAccessRightFilter
}

export type LanguageWhereInput = {
  AND?: Enumerable<LanguageWhereInput>
  OR?: Array<LanguageWhereInput>
  NOT?: Enumerable<LanguageWhereInput>
  id?: number | IntFilter
  code?: string | StringFilter
  UserOnLanguageOnProficiency?: UserOnLanguageOnProficiencyListRelationFilter
}

export type LanguageRelationFilter = {
  is?: LanguageWhereInput | null
  isNot?: LanguageWhereInput | null
}

export type NestedEnumProficiencyLevelFilter = {
  equals?: ProficiencyLevel
  in?: Enumerable<ProficiencyLevel>
  notIn?: Enumerable<ProficiencyLevel>
  not?: NestedEnumProficiencyLevelFilter | null
}

export type EnumProficiencyLevelFilter = {
  equals?: ProficiencyLevel
  in?: Enumerable<ProficiencyLevel>
  notIn?: Enumerable<ProficiencyLevel>
  not?: ProficiencyLevel | NestedEnumProficiencyLevelFilter
}

export type ProficiencyWhereInput = {
  AND?: Enumerable<ProficiencyWhereInput>
  OR?: Array<ProficiencyWhereInput>
  NOT?: Enumerable<ProficiencyWhereInput>
  id?: number | IntFilter
  name?: ProficiencyLevel | EnumProficiencyLevelFilter
  UserOnLanguageOnProficiency?: UserOnLanguageOnProficiencyListRelationFilter
}

export type ProficiencyRelationFilter = {
  is?: ProficiencyWhereInput | null
  isNot?: ProficiencyWhereInput | null
}

export type UserOnLanguageOnProficiencyWhereInput = {
  AND?: Enumerable<UserOnLanguageOnProficiencyWhereInput>
  OR?: Array<UserOnLanguageOnProficiencyWhereInput>
  NOT?: Enumerable<UserOnLanguageOnProficiencyWhereInput>
  id?: number | IntFilter
  language?: LanguageWhereInput | null
  languageId?: number | IntFilter
  proficiency?: ProficiencyWhereInput | null
  proficiencyId?: number | IntFilter
  user?: UserWhereInput | null
  userId?: number | IntFilter
}

export type UserOnLanguageOnProficiencyListRelationFilter = {
  every?: UserOnLanguageOnProficiencyWhereInput
  some?: UserOnLanguageOnProficiencyWhereInput
  none?: UserOnLanguageOnProficiencyWhereInput
}

export type ProfileRelationFilter = {
  is?: ProfileWhereInput | null
  isNot?: ProfileWhereInput | null
}

export type UserWhereInput = {
  AND?: Enumerable<UserWhereInput>
  OR?: Array<UserWhereInput>
  NOT?: Enumerable<UserWhereInput>
  id?: number | IntFilter
  createdAt?: Date | string | DateTimeFilter
  updatedAt?: Date | string | DateTimeFilter
  email?: string | StringFilter
  password?: string | StringFilter
  name?: string | StringFilter
  surname?: string | StringFilter
  isDeleted?: boolean | BoolFilter
  accessToken?: string | StringNullableFilter | null
  refreshToken?: string | StringNullableFilter | null
  lastLogin?: Date | string | DateTimeNullableFilter | null
  isEmailVerified?: boolean | BoolFilter
  access?: AccessRight | EnumAccessRightFilter
  languages?: UserOnLanguageOnProficiencyListRelationFilter
  profile?: ProfileWhereInput | null
}

export type UserRelationFilter = {
  is?: UserWhereInput | null
  isNot?: UserWhereInput | null
}

export type ProfileWhereInput = {
  AND?: Enumerable<ProfileWhereInput>
  OR?: Array<ProfileWhereInput>
  NOT?: Enumerable<ProfileWhereInput>
  id?: number | IntFilter
  bio?: InputJsonValue | JsonNullableFilter | null
  user?: UserWhereInput | null
  userId?: number | IntFilter
}

export type ProfileOrderByInput = {
  id?: SortOrder
  bio?: SortOrder
  userId?: SortOrder
}

export type ProfileWhereUniqueInput = {
  id?: number
  userId?: number
}

export type UserOnLanguageOnProficiencyOrderByInput = {
  id?: SortOrder
  languageId?: SortOrder
  proficiencyId?: SortOrder
  userId?: SortOrder
}

export type UserOnLanguageOnProficiencyWhereUniqueInput = {
  id?: number
}

export type UserOrderByInput = {
  id?: SortOrder
  createdAt?: SortOrder
  updatedAt?: SortOrder
  email?: SortOrder
  password?: SortOrder
  name?: SortOrder
  surname?: SortOrder
  isDeleted?: SortOrder
  accessToken?: SortOrder
  refreshToken?: SortOrder
  lastLogin?: SortOrder
  isEmailVerified?: SortOrder
  access?: SortOrder
}

export type UserWhereUniqueInput = {
  id?: number
  email?: string
}

export type ProficiencyOrderByInput = {
  id?: SortOrder
  name?: SortOrder
}

export type ProficiencyWhereUniqueInput = {
  id?: number
  name?: ProficiencyLevel
}

export type LanguageOrderByInput = {
  id?: SortOrder
  code?: SortOrder
}

export type LanguageWhereUniqueInput = {
  id?: number
  code?: string
}

export type LanguageCreateWithoutUserOnLanguageOnProficiencyInput = {
  code: string
}

export type LanguageCreateOneWithoutUserOnLanguageOnProficiencyInput = {
  create?: LanguageCreateWithoutUserOnLanguageOnProficiencyInput
  connect?: LanguageWhereUniqueInput
}

export type ProficiencyCreateWithoutUserOnLanguageOnProficiencyInput = {
  name: ProficiencyLevel
}

export type ProficiencyCreateOneWithoutUserOnLanguageOnProficiencyInput = {
  create?: ProficiencyCreateWithoutUserOnLanguageOnProficiencyInput
  connect?: ProficiencyWhereUniqueInput
}

export type UserOnLanguageOnProficiencyCreateWithoutUserInput = {
  language: LanguageCreateOneWithoutUserOnLanguageOnProficiencyInput
  proficiency: ProficiencyCreateOneWithoutUserOnLanguageOnProficiencyInput
}

export type UserOnLanguageOnProficiencyCreateManyWithoutUserInput = {
  create?: Enumerable<UserOnLanguageOnProficiencyCreateWithoutUserInput>
  connect?: Enumerable<UserOnLanguageOnProficiencyWhereUniqueInput>
}

export type UserCreateWithoutProfileInput = {
  createdAt?: Date | string
  updatedAt?: Date | string
  email: string
  password: string
  name: string
  surname: string
  isDeleted?: boolean
  accessToken?: string | null
  refreshToken?: string | null
  lastLogin?: Date | string | null
  isEmailVerified?: boolean
  access: AccessRight
  languages?: UserOnLanguageOnProficiencyCreateManyWithoutUserInput
}

export type UserCreateOneWithoutProfileInput = {
  create?: UserCreateWithoutProfileInput
  connect?: UserWhereUniqueInput
}

export type ProfileCreateInput = {
  bio?: InputJsonValue | null
  user: UserCreateOneWithoutProfileInput
}

export type LanguageUpdateWithoutUserOnLanguageOnProficiencyDataInput = {
  code?: string
}

export type LanguageUpsertWithoutUserOnLanguageOnProficiencyInput = {
  update: LanguageUpdateWithoutUserOnLanguageOnProficiencyDataInput
  create: LanguageCreateWithoutUserOnLanguageOnProficiencyInput
}

export type LanguageUpdateOneRequiredWithoutUserOnLanguageOnProficiencyInput = {
  create?: LanguageCreateWithoutUserOnLanguageOnProficiencyInput
  connect?: LanguageWhereUniqueInput
  update?: LanguageUpdateWithoutUserOnLanguageOnProficiencyDataInput
  upsert?: LanguageUpsertWithoutUserOnLanguageOnProficiencyInput
}

export type ProficiencyUpdateWithoutUserOnLanguageOnProficiencyDataInput = {
  name?: ProficiencyLevel
}

export type ProficiencyUpsertWithoutUserOnLanguageOnProficiencyInput = {
  update: ProficiencyUpdateWithoutUserOnLanguageOnProficiencyDataInput
  create: ProficiencyCreateWithoutUserOnLanguageOnProficiencyInput
}

export type ProficiencyUpdateOneRequiredWithoutUserOnLanguageOnProficiencyInput = {
  create?: ProficiencyCreateWithoutUserOnLanguageOnProficiencyInput
  connect?: ProficiencyWhereUniqueInput
  update?: ProficiencyUpdateWithoutUserOnLanguageOnProficiencyDataInput
  upsert?: ProficiencyUpsertWithoutUserOnLanguageOnProficiencyInput
}

export type UserOnLanguageOnProficiencyUpdateWithoutUserDataInput = {
  language?: LanguageUpdateOneRequiredWithoutUserOnLanguageOnProficiencyInput
  proficiency?: ProficiencyUpdateOneRequiredWithoutUserOnLanguageOnProficiencyInput
}

export type UserOnLanguageOnProficiencyUpdateWithWhereUniqueWithoutUserInput = {
  where: UserOnLanguageOnProficiencyWhereUniqueInput
  data: UserOnLanguageOnProficiencyUpdateWithoutUserDataInput
}

export type UserOnLanguageOnProficiencyScalarWhereInput = {
  AND?: Enumerable<UserOnLanguageOnProficiencyScalarWhereInput>
  OR?: Array<UserOnLanguageOnProficiencyScalarWhereInput>
  NOT?: Enumerable<UserOnLanguageOnProficiencyScalarWhereInput>
  id?: number | IntFilter
  languageId?: number | IntFilter
  proficiencyId?: number | IntFilter
  userId?: number | IntFilter
}

export type UserOnLanguageOnProficiencyUpdateManyDataInput = {

}

export type UserOnLanguageOnProficiencyUpdateManyWithWhereNestedInput = {
  where: UserOnLanguageOnProficiencyScalarWhereInput
  data: UserOnLanguageOnProficiencyUpdateManyDataInput
}

export type UserOnLanguageOnProficiencyUpsertWithWhereUniqueWithoutUserInput = {
  where: UserOnLanguageOnProficiencyWhereUniqueInput
  update: UserOnLanguageOnProficiencyUpdateWithoutUserDataInput
  create: UserOnLanguageOnProficiencyCreateWithoutUserInput
}

export type UserOnLanguageOnProficiencyUpdateManyWithoutUserInput = {
  create?: Enumerable<UserOnLanguageOnProficiencyCreateWithoutUserInput>
  connect?: Enumerable<UserOnLanguageOnProficiencyWhereUniqueInput>
  set?: Enumerable<UserOnLanguageOnProficiencyWhereUniqueInput>
  disconnect?: Enumerable<UserOnLanguageOnProficiencyWhereUniqueInput>
  delete?: Enumerable<UserOnLanguageOnProficiencyWhereUniqueInput>
  update?: Enumerable<UserOnLanguageOnProficiencyUpdateWithWhereUniqueWithoutUserInput>
  updateMany?: Enumerable<UserOnLanguageOnProficiencyUpdateManyWithWhereNestedInput> | null
  deleteMany?: Enumerable<UserOnLanguageOnProficiencyScalarWhereInput>
  upsert?: Enumerable<UserOnLanguageOnProficiencyUpsertWithWhereUniqueWithoutUserInput>
}

export type UserUpdateWithoutProfileDataInput = {
  createdAt?: Date | string
  updatedAt?: Date | string
  email?: string
  password?: string
  name?: string
  surname?: string
  isDeleted?: boolean
  accessToken?: string | null
  refreshToken?: string | null
  lastLogin?: Date | string | null
  isEmailVerified?: boolean
  access?: AccessRight
  languages?: UserOnLanguageOnProficiencyUpdateManyWithoutUserInput
}

export type UserUpsertWithoutProfileInput = {
  update: UserUpdateWithoutProfileDataInput
  create: UserCreateWithoutProfileInput
}

export type UserUpdateOneRequiredWithoutProfileInput = {
  create?: UserCreateWithoutProfileInput
  connect?: UserWhereUniqueInput
  update?: UserUpdateWithoutProfileDataInput
  upsert?: UserUpsertWithoutProfileInput
}

export type ProfileUpdateInput = {
  bio?: InputJsonValue | null
  user?: UserUpdateOneRequiredWithoutProfileInput
}

export type ProfileUpdateManyMutationInput = {
  bio?: InputJsonValue | null
}

export type ProfileCreateWithoutUserInput = {
  bio?: InputJsonValue | null
}

export type ProfileCreateOneWithoutUserInput = {
  create?: ProfileCreateWithoutUserInput
  connect?: ProfileWhereUniqueInput
}

export type UserCreateInput = {
  createdAt?: Date | string
  updatedAt?: Date | string
  email: string
  password: string
  name: string
  surname: string
  isDeleted?: boolean
  accessToken?: string | null
  refreshToken?: string | null
  lastLogin?: Date | string | null
  isEmailVerified?: boolean
  access: AccessRight
  languages?: UserOnLanguageOnProficiencyCreateManyWithoutUserInput
  profile?: ProfileCreateOneWithoutUserInput
}

export type ProfileUpdateWithoutUserDataInput = {
  bio?: InputJsonValue | null
}

export type ProfileUpsertWithoutUserInput = {
  update: ProfileUpdateWithoutUserDataInput
  create: ProfileCreateWithoutUserInput
}

export type ProfileUpdateOneWithoutUserInput = {
  create?: ProfileCreateWithoutUserInput
  connect?: ProfileWhereUniqueInput
  disconnect?: boolean
  delete?: boolean
  update?: ProfileUpdateWithoutUserDataInput
  upsert?: ProfileUpsertWithoutUserInput
}

export type UserUpdateInput = {
  createdAt?: Date | string
  updatedAt?: Date | string
  email?: string
  password?: string
  name?: string
  surname?: string
  isDeleted?: boolean
  accessToken?: string | null
  refreshToken?: string | null
  lastLogin?: Date | string | null
  isEmailVerified?: boolean
  access?: AccessRight
  languages?: UserOnLanguageOnProficiencyUpdateManyWithoutUserInput
  profile?: ProfileUpdateOneWithoutUserInput
}

export type UserUpdateManyMutationInput = {
  createdAt?: Date | string
  updatedAt?: Date | string
  email?: string
  password?: string
  name?: string
  surname?: string
  isDeleted?: boolean
  accessToken?: string | null
  refreshToken?: string | null
  lastLogin?: Date | string | null
  isEmailVerified?: boolean
  access?: AccessRight
}

export type UserCreateWithoutLanguagesInput = {
  createdAt?: Date | string
  updatedAt?: Date | string
  email: string
  password: string
  name: string
  surname: string
  isDeleted?: boolean
  accessToken?: string | null
  refreshToken?: string | null
  lastLogin?: Date | string | null
  isEmailVerified?: boolean
  access: AccessRight
  profile?: ProfileCreateOneWithoutUserInput
}

export type UserCreateOneWithoutLanguagesInput = {
  create?: UserCreateWithoutLanguagesInput
  connect?: UserWhereUniqueInput
}

export type UserOnLanguageOnProficiencyCreateInput = {
  language: LanguageCreateOneWithoutUserOnLanguageOnProficiencyInput
  proficiency: ProficiencyCreateOneWithoutUserOnLanguageOnProficiencyInput
  user: UserCreateOneWithoutLanguagesInput
}

export type UserUpdateWithoutLanguagesDataInput = {
  createdAt?: Date | string
  updatedAt?: Date | string
  email?: string
  password?: string
  name?: string
  surname?: string
  isDeleted?: boolean
  accessToken?: string | null
  refreshToken?: string | null
  lastLogin?: Date | string | null
  isEmailVerified?: boolean
  access?: AccessRight
  profile?: ProfileUpdateOneWithoutUserInput
}

export type UserUpsertWithoutLanguagesInput = {
  update: UserUpdateWithoutLanguagesDataInput
  create: UserCreateWithoutLanguagesInput
}

export type UserUpdateOneRequiredWithoutLanguagesInput = {
  create?: UserCreateWithoutLanguagesInput
  connect?: UserWhereUniqueInput
  update?: UserUpdateWithoutLanguagesDataInput
  upsert?: UserUpsertWithoutLanguagesInput
}

export type UserOnLanguageOnProficiencyUpdateInput = {
  language?: LanguageUpdateOneRequiredWithoutUserOnLanguageOnProficiencyInput
  proficiency?: ProficiencyUpdateOneRequiredWithoutUserOnLanguageOnProficiencyInput
  user?: UserUpdateOneRequiredWithoutLanguagesInput
}

export type UserOnLanguageOnProficiencyUpdateManyMutationInput = {

}

export type UserOnLanguageOnProficiencyCreateWithoutProficiencyInput = {
  language: LanguageCreateOneWithoutUserOnLanguageOnProficiencyInput
  user: UserCreateOneWithoutLanguagesInput
}

export type UserOnLanguageOnProficiencyCreateManyWithoutProficiencyInput = {
  create?: Enumerable<UserOnLanguageOnProficiencyCreateWithoutProficiencyInput>
  connect?: Enumerable<UserOnLanguageOnProficiencyWhereUniqueInput>
}

export type ProficiencyCreateInput = {
  name: ProficiencyLevel
  UserOnLanguageOnProficiency?: UserOnLanguageOnProficiencyCreateManyWithoutProficiencyInput
}

export type UserOnLanguageOnProficiencyUpdateWithoutProficiencyDataInput = {
  language?: LanguageUpdateOneRequiredWithoutUserOnLanguageOnProficiencyInput
  user?: UserUpdateOneRequiredWithoutLanguagesInput
}

export type UserOnLanguageOnProficiencyUpdateWithWhereUniqueWithoutProficiencyInput = {
  where: UserOnLanguageOnProficiencyWhereUniqueInput
  data: UserOnLanguageOnProficiencyUpdateWithoutProficiencyDataInput
}

export type UserOnLanguageOnProficiencyUpsertWithWhereUniqueWithoutProficiencyInput = {
  where: UserOnLanguageOnProficiencyWhereUniqueInput
  update: UserOnLanguageOnProficiencyUpdateWithoutProficiencyDataInput
  create: UserOnLanguageOnProficiencyCreateWithoutProficiencyInput
}

export type UserOnLanguageOnProficiencyUpdateManyWithoutProficiencyInput = {
  create?: Enumerable<UserOnLanguageOnProficiencyCreateWithoutProficiencyInput>
  connect?: Enumerable<UserOnLanguageOnProficiencyWhereUniqueInput>
  set?: Enumerable<UserOnLanguageOnProficiencyWhereUniqueInput>
  disconnect?: Enumerable<UserOnLanguageOnProficiencyWhereUniqueInput>
  delete?: Enumerable<UserOnLanguageOnProficiencyWhereUniqueInput>
  update?: Enumerable<UserOnLanguageOnProficiencyUpdateWithWhereUniqueWithoutProficiencyInput>
  updateMany?: Enumerable<UserOnLanguageOnProficiencyUpdateManyWithWhereNestedInput> | null
  deleteMany?: Enumerable<UserOnLanguageOnProficiencyScalarWhereInput>
  upsert?: Enumerable<UserOnLanguageOnProficiencyUpsertWithWhereUniqueWithoutProficiencyInput>
}

export type ProficiencyUpdateInput = {
  name?: ProficiencyLevel
  UserOnLanguageOnProficiency?: UserOnLanguageOnProficiencyUpdateManyWithoutProficiencyInput
}

export type ProficiencyUpdateManyMutationInput = {
  name?: ProficiencyLevel
}

export type UserOnLanguageOnProficiencyCreateWithoutLanguageInput = {
  proficiency: ProficiencyCreateOneWithoutUserOnLanguageOnProficiencyInput
  user: UserCreateOneWithoutLanguagesInput
}

export type UserOnLanguageOnProficiencyCreateManyWithoutLanguageInput = {
  create?: Enumerable<UserOnLanguageOnProficiencyCreateWithoutLanguageInput>
  connect?: Enumerable<UserOnLanguageOnProficiencyWhereUniqueInput>
}

export type LanguageCreateInput = {
  code: string
  UserOnLanguageOnProficiency?: UserOnLanguageOnProficiencyCreateManyWithoutLanguageInput
}

export type UserOnLanguageOnProficiencyUpdateWithoutLanguageDataInput = {
  proficiency?: ProficiencyUpdateOneRequiredWithoutUserOnLanguageOnProficiencyInput
  user?: UserUpdateOneRequiredWithoutLanguagesInput
}

export type UserOnLanguageOnProficiencyUpdateWithWhereUniqueWithoutLanguageInput = {
  where: UserOnLanguageOnProficiencyWhereUniqueInput
  data: UserOnLanguageOnProficiencyUpdateWithoutLanguageDataInput
}

export type UserOnLanguageOnProficiencyUpsertWithWhereUniqueWithoutLanguageInput = {
  where: UserOnLanguageOnProficiencyWhereUniqueInput
  update: UserOnLanguageOnProficiencyUpdateWithoutLanguageDataInput
  create: UserOnLanguageOnProficiencyCreateWithoutLanguageInput
}

export type UserOnLanguageOnProficiencyUpdateManyWithoutLanguageInput = {
  create?: Enumerable<UserOnLanguageOnProficiencyCreateWithoutLanguageInput>
  connect?: Enumerable<UserOnLanguageOnProficiencyWhereUniqueInput>
  set?: Enumerable<UserOnLanguageOnProficiencyWhereUniqueInput>
  disconnect?: Enumerable<UserOnLanguageOnProficiencyWhereUniqueInput>
  delete?: Enumerable<UserOnLanguageOnProficiencyWhereUniqueInput>
  update?: Enumerable<UserOnLanguageOnProficiencyUpdateWithWhereUniqueWithoutLanguageInput>
  updateMany?: Enumerable<UserOnLanguageOnProficiencyUpdateManyWithWhereNestedInput> | null
  deleteMany?: Enumerable<UserOnLanguageOnProficiencyScalarWhereInput>
  upsert?: Enumerable<UserOnLanguageOnProficiencyUpsertWithWhereUniqueWithoutLanguageInput>
}

export type LanguageUpdateInput = {
  code?: string
  UserOnLanguageOnProficiency?: UserOnLanguageOnProficiencyUpdateManyWithoutLanguageInput
}

export type LanguageUpdateManyMutationInput = {
  code?: string
}

/**
 * Batch Payload for updateMany & deleteMany
 */

export type BatchPayload = {
  count: number
}

/**
 * DMMF
 */
export declare const dmmf: DMMF.Document;
export {};
